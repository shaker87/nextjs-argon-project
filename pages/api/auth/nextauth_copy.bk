import NextAuth from "next-auth";
import Providers from "next-auth/providers";
import axios from "axios";

//import { verifyPassword } from "../../../lib/auth";
//import { connectToDatabase } from "../../../lib/db";

export default NextAuth({
  session: {
    jwt: true,
  },
  providers: [
    Providers.Credentials({
      // The name to display on the sign in form (e.g. 'Sign in with...')
      name: "Credentials 1",
      // The credentials is used to generate a suitable form on the sign in page.
      // You can specify whatever fields you are expecting to be submitted.
      // e.g. domain, username, password, 2FA token, etc.
      credentials: {
        identifier: {
          label: "Identifier",
          type: "text",
          placeholder: "jsmith",
        },
        password: { label: "Password", type: "password" },
      },

      // async authorize(credentials) {
      //   const user = await axios.post('https://localapi.prismvu.com',{
      //          identifier: "charles@prismvu.com",
      //          password: "Md0316!!",
      //        }
      //   )
      // },

      async authorize(credentials, req) {
        // Add logic here to look up the user from the credentials supplied
        // const user = { id: 1, name: "J Smith", email: "jsmith@example.com" };
        // const user await fetch('https://example.com', {
        //   credentials: 'include'
        // });
        // const user = await fetch("https://localapi.prismvu.com:", {
        //   identifier: credentials.username,
        //   password: credentials.password,
        // });
        // const user = await axios.post(
        //   `httpslocalapi.prismvu.com/auth/local`,
        //   {
        //     identifier: "charles@prismvu.com",
        //     password: "Md0316!!",
        //   }
        // );
        // const user = await fetch("https://localapi.prismvu.com/auth/local", {
        //   identifier: "charles@prismvu.com",
        //   password: "Md0316!!",
        // });

        // const user = await fetch("https://localapi.prismvu.com/auth/local", {
        //   method: "POST",
        //   headers: {
        //     Accept: "application/json",
        //     "Content-Type": "application/json",
        //   },
        //   body: JSON.stringify({
        //     identifier: "charles@prismvu.com",
        //     password: "Md0316!!",
        //   }),
        // });
        const user = await axios
          .post(`https://api-dev.prismvu.com/auth/local`, {
            identifier: "test@test.com",
            password: "Test1234!",
          })
          .then((res) => {
            console.log(res);
            const getData1 = res;
          })
          .catch((err) => {
            console.log(err);
          });

        console.log(`user`, user);
        // const user = await fetch("https://api-dev.prismvu.com:", {
        //   identifier: "charles@prismvu.com",
        //   password: "Md0316!!",
        // });
        // const user = await axios.post(
        //   `${process.env.NEXT_PUBLIC_API_URL}/auth/local`,
        //   {
        //     identifier: credentials.username,
        //     password: credentials.password,
        //   }
        // );
        if (user) {
          // Any object returned will be saved in `user` property of the JWT
          return user;
        } else {
          // If you return null or false then the credentials will be rejected
          return null;
          // You can also Reject this callback with an Error or with a URL:
          // throw new Error('error message') // Redirect to error page
          // throw '/path/to/redirect'        // Redirect to a URL
        }
      },
    }),
    // Providers.Credentials({
    //   name: "Credentials 2",
    //   async authorize(credentials) {
    //     const client = await connectToDatabase();

    //     const usersCollection = client.db().collection("users");

    //     const user = await usersCollection.findOne({
    //       email: credentials.email,
    //     });

    //     if (!user) {
    //       client.close();
    //       throw new Error("No user found!");
    //     }

    //     const isValid = await verifyPassword(
    //       credentials.password,
    //       user.password
    //     );

    //     if (!isValid) {
    //       client.close();
    //       throw new Error("Could not log you in!");
    //     }

    //     client.close();
    //     return { email: user.email };
    //   },
    // }),
  ],
});
